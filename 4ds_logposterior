#R script to compute the log posterior of the BayesCluster (continuous) model - data integration version for 4 datasets (not using the non-local priors)
library(mvnfast)
library(gmp)

# Input: z.s - the latent variables which we cluster
#        dataMatrix1 - the first dataset
#        dataMatrix2 - the second dataset 
#        d1.product = z%*%t(W1)
#        d2.product = z%*%t(W2)
#        nPcomponents - number of principal components
#        mean.ppca - the means of the clusters
#        Cind - a vector containing the cluster allocation
#        nClusters - number of clusters of latent variables
#        W.m1 - the loadings matrix for the first dataset
#        C.m1 - the covariance matrix for the first dataset
#        W.m2 - the loadings matrix for the second dataset
#        C.m2 - the covariance matrix for the second dataset
#        sigma2.1 - the error for the first dataset
#        sigma2.2 - the error for the second dataset
# Output: the posterior of the model
logposterior_BC_DI_4ds <- function(dataMatrix1, dataMatrix2, dataMatrix3, dataMatrix4, nPcomponents, nCategories, z.s,Cind_i, ClustersWithPoints, W.m1,W.m2, W.m3, W.ds,  sigma2.1, sigma2.2, sigma2.3, mu.ds, C.1, C.2, C.3, Nclusters, mean.clust, alpha, nClPoints){
  nFeatures1   <- ncol(dataMatrix1)
  nFeatures2   <- ncol(dataMatrix2)
  nFeatures3   <- ncol(dataMatrix3)
  nFeatures4   <- ncol(dataMatrix4)
  nDataItems   <- nrow(dataMatrix1)
  likelihood    = vector("list",Nclusters)      
  likelihood1 <- c()
  likelihood2 <- c()
  likelihood3 <- c()
  likelihood4 <- vector("list", nFeatures4)
  likelihood5 <- vector("list", nFeatures4)
  
  # cluster means 
  logposterior.1    <- sum(dmvn(mean.clust, rep(0,nPcomponents), sigma = diag(1, nPcomponents), log = TRUE))
  
  # latent variables 
  likelihood     <- lapply(1:Nclusters, function(k) dmvn(z.s[which(Cind_i==ClustersWithPoints[k]),], mean.clust[k,], sigma= diag(1,nPcomponents), log = TRUE))
  logposterior.2 <- do.call(sum, likelihood)
 
  # likelihood (dataset 1)
  likelihood1    <- sapply(1:nDataItems, function(i) dmvn(dataMatrix1[i,], z.s[i,]%*%t(W.m1) , sigma = sigma2.1*diag(1,nFeatures1), log = TRUE)) 
  logposterior.3 <- sum(likelihood1)
  
  # likelihood (dataset 2)
  likelihood2    <- sapply(1:nDataItems, function(i) dmvn(dataMatrix2[i,], z.s[i,]%*%t(W.m2), sigma = sigma2.2*diag(1,nFeatures2), log = TRUE))   
  logposterior.4 <- sum(likelihood2)
  
  # likelihood (dataset 3)
  likelihood3    <- sapply(1:nDataItems, function(i) dmvn(dataMatrix3[i,], z.s[i,]%*%t(W.m3), sigma = sigma2.3*diag(1,nFeatures3), log = TRUE))   
  logposterior.5 <- sum(likelihood3)
  
  # likelihood (dataset 4) 
  logp <- rep(0, nDataItems)                     # log-posterior from the categorical data likelihood 
  
  for (j in 1:nDataItems){
    softmax.product <- 0   # initialise the sofmax product to be 1
    for (s in 1:nFeatures4){
      softmax.product <- softmax.product+ log((softmax(z.s[j,]%*%W.ds[[s]]+mu.ds[[s]])[dataMatrix4[j,s]]))
      
    }
    
    
    logp[j] <- softmax.product
  }
  
  logposterior.6    <- sum(logp)
  
  # cluster indicators
  log.part          <- c()
  for (i in 1:Nclusters){
    log.part[i]     <- log(factorialZ(nClPoints[i]-1 + alpha/Nclusters))
  }
  logposterior.7    <- sum(log.part) - Nclusters*lgamma(alpha/Nclusters) + lgamma(alpha) - log(factorialZ(nDataItems-1+alpha)) 
 
  # noise (dataset 1)
  logposterior.8 <- dgamma(sigma2.1, 1,1, log = TRUE)  # scale = shape = 1
 
  # loadings (dataset 1) - N(0,I) prior on the columns
  logposterior.9    <- sum(dmvn(W.m1, rep(0, nPcomponents), sigma = diag(1,nPcomponents), log = TRUE))  
  
  # noise (dataset 2)
  logposterior.10 <- dgamma(sigma2.2, 1,1, log = TRUE) # shape = scale = 1
  
  # loadings (dataset 2)
  logposterior.11    <- sum(dmvn(W.m2, rep(0, nPcomponents), sigma = diag(1,nPcomponents), log = TRUE))       
 
  # noise (dataset 3)
  logposterior.12 <- dgamma(sigma2.3, 1,1, log = TRUE) # shape = scale = 1
  
  # loadings (dataset 3)
  logposterior.13    <- sum(dmvn(W.m3, rep(0, nPcomponents), sigma = diag(1,nPcomponents), log = TRUE))       
  
  # loadings and offsets (dataset 4)
  log.loadings <- do.call(cbind, lapply(1:nFeatures4, function(i) likelihood4[[i]] = dmvnorm(W.ds[[i]], rep(0,nCategories[i]), sigma = diag(1,nCategories[i]), log = TRUE)))
  log.offset   <- do.call(cbind, lapply(1:nFeatures4, function(i) likelihood5[[i]] = dmvnorm(mu.ds[[i]], rep(0,nCategories[i]), sigma = diag(1,nCategories[i]), log = TRUE)))
  
  
  logposterior.14    <- sum(log.loadings)
  logposterior.15    <- sum(log.offset)
  
  # all logposterior 
  logposterior_BC_DI_4   <- logposterior.1 + logposterior.2 + logposterior.3 + logposterior.4 + logposterior.5 + logposterior.6+  logposterior.7 + logposterior.8 + logposterior.9 + logposterior.10 + logposterior.11 + logposterior.12 + logposterior.13 + logposterior.14 + logposterior.15
  
  logposterior_BC_DI_4
}
